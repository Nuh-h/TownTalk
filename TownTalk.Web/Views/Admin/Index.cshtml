@model List<ApplicationUser>;

<style>
    #network {
        width: 100%;
        height: 500px;
        border: 1px solid lightgray;
    }

    /* Custom styles for the tabs */
    .tab-content {
        padding: 20px;
    }

    .nav-pills .nav-link {
        border-radius: 0;
    }

    /* Styling the details and summary elements to look like tabs */
    details {
        margin-bottom: 10px;
    }

    summary {
        cursor: pointer;
        font-weight: bold;
        padding: 10px;
        background-color: #00b3aa00;
        color: white;
        border: 1px solid #007bff;
        border-radius: 5px;
    }

    details[open] summary {
        background-color: #00b3aa00;
    }

    .details-content {
        padding: 20px;
        background-color: #00b3aa00;
        border: 1px dashed #ddd;
        border-radius: 0 0 5px 5px;
    }
</style>
<link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

<script>
    Window.GetMap = async function () {
        var user1 = $("form select#userId1").val();
        var user1Label = $("form select#userId1 option:selected").text();
        var user2 = $("form select#userId2").val();
        var user2Label = $("form select#userId2 option:selected").text();

        console.log({ user1, user2 });

        // Make the API call to get mutual followers and connections
        await $.get(`/connections?userId1=${user1}&userId2=${user2}`, function (data) {
            console.log(data);
            $('#mutual-followers').html(`There are ${data.mutualConnections.length} mutual connections`);

            // Step 2: Prepare data for the network graph visualization
            let nodes = [];
            let edges = [];
            let nodeIds = new Set(); // To track added node IDs

            // Helper function to add a node only if it does not exist yet
            function addNode(nodeId, label, color) {
                if (!nodeIds.has(nodeId)) {
                    nodes.push({ id: nodeId, label: label, color: color });
                    nodeIds.add(nodeId);
                }
            }

            // Add nodes for User 1 and User 2
            addNode(user1, user1Label, { background: '#FF0000', border: '#D32F2F' });
            addNode(user2, user2Label, { background: '#00FF00', border: '#388E3C' });

            // Add nodes for mutual followers and edges
            data.mutualConnections.forEach(function (follower) {
                // Add the mutual follower node if not already added
                addNode(follower.id, follower.displayName, { background: '#318E3C', border: '#FF9800' });

                // Add edges for mutual connections (user1 <-> mutualFollower, user2 <-> mutualFollower)
                edges.push({ from: user1, to: follower.id });
                edges.push({ from: user2, to: follower.id });
            });


            // Step 3: Add all connections (direct followers and following)
            addConnections(user1, data.allConnectionsUser1, nodes, edges);
            addConnections(user2, data.allConnectionsUser2, nodes, edges);


            highlightPath(data.path, edges);

            // Step 4: Set up the Vis.js network graph
            var container = document.getElementById('network');
            var networkData = {
                nodes: new vis.DataSet(nodes),
                edges: new vis.DataSet(edges)
            };

            var options = {
                nodes: {
                    shape: 'dot',               // Node shape
                    size: 30,                   // Node size
                    color: {
                        background: '#FF6F61', // Fill color (background)
                        border: '#D32F2F',     // Stroke (border) color
                        highlight: {
                            background: '#FF8A65',  // Highlighted node fill color
                            border: '#C2185B'       // Highlighted node stroke color
                        }
                    },
                    font: {
                        color: 'white',         // Font color on the node
                        size: 16,               // Font size
                        face: 'arial'           // Font face
                    }
                },
                edges: {
                    width: 2,                    // Edge width
                    color: '#A9A9A9',            // Edge color
                    smooth: true,                // Smooth curve for edges
                },
                physics: {
                    enabled: true                 // Enables physics for node movement
                }
            };

            var network = new vis.Network(container, networkData, options);

            function addConnections(userId, connections, nodes, edges, nodeIds) {
                connections.forEach(function (connection) {
                    // Add each connected user as a node if not already added
                    addNode(connection.id, connection.displayName, { background: '#FF6F61', border: '#D32F2F' });

                    // Add edge between user and their connection (follower/following)
                    edges.push({ from: userId, to: connection.id });
                });
            }

            // Helper function to highlight the path by changing edge color and width
            function highlightPath(path, edges) {
                for (let i = 0; i < path.length - 1; i++) {
                    // Find the edge connecting the nodes in the path
                    let fromNode = path[i];
                    let toNode = path[i + 1];

                    console.log(edges, fromNode, toNode);
                    // Change the edge properties (color, width)
                    let edge = edges.find(e => (e.from === fromNode.id && e.to === toNode.id) || (e.from === toNode.id && e.to === fromNode.id));
                    if (edge) {
                        edge.color = { color: '#FF8C00' }; // Set color of the path edge to orange
                        edge.width = 4;                    // Increase width of the path edge
                    }
                }
            }
        });
    };

</script>

<div class="container mt-4">
    <h1>Admin</h1>
    <p>Here will be a suite of capabilities Admins can use to adminster, and manage this site.</p>

    <h2>Tools</h2>
    <details>
        <summary>Degree of Connections</summary>
        <div class="details-content card rounded theme-dark">
            <form>
                <div class="form-group">
                    <label for="userId1" id="userId1Label">User 1</label>
                    <select id="userId1" name="userId1" class="form-control">
                        <option value="">Select user</option>
                        @foreach (ApplicationUser user in Model)
                        {
                            <option value="@user.Id">@user.DisplayName</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="userId2" id="userId2Label">User 2</label>
                    <select id="userId2" name="userId2" class="form-control">
                        <option value="">Select user</option>
                        @foreach (ApplicationUser user in Model)
                        {
                            <option value="@user.Id">@user.DisplayName</option>
                        }
                    </select>
                </div>
                <div>
                    <button onClick="Window.GetMap()" type="button" class="btn btn-primary">Find degree of
                        connections</button>
                </div>
            </form>

            <div id="mutual-followers"></div>
            <div id="network"></div>
        </div>
    </details>

    <details>
        <summary>Notifications</summary>
        <div class="details-content">
            <h4>Recent notifications</h4>
            <table id="notificationsTable" class="table table-bordered">
                <thead>
                    <tr>
                        <th>Sender</th>
                        <th>Receiver</th>
                        <th>Message</th>
                        <th>Time</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Notifications will be inserted here dynamically -->
                </tbody>
            </table>
        </div>
    </details>

    <details>
        <summary>Analytics</summary>
        <div class="details-content">
            <h4>Tool 3: Another Placeholder</h4>
            <p>This is a placeholder for Tool 3. Add functionality here.</p>
        </div>
    </details>

    <details>
        <summary>Reports</summary>
        <div class="details-content">
            <h4>Tool 4: Yet Another Tool</h4>
            <p>This is a placeholder for Tool 4. Add functionality here.</p>
        </div>
    </details>
</div>

<!-- jQuery and jQuery UI JS -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
<!-- Bootstrap JS -->
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
