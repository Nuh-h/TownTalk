@using System.Security.Claims
@using TownTalk.ViewModels
@model TownTalk.ViewModels.PostViewModel

@{
    int activeReactionIndex = Model.ActiveUserReaction.HasValue ? (int)Model.ActiveUserReaction : -1;
}

<div class="reaction-container d-flex align-items-center" data-post-id="@Model.Id" data-active-reaction="@activeReactionIndex">
    <div class="position-relative">
        <button class="reaction-btn btn w-small p-1 rounded" aria-haspopup="true" aria-expanded="false"
            data-bs-toggle="popover" style="margin-right: 0.5em;">
            âž•
        </button>

        <div class="reactionPopoverContent" style="display: none;">
            <div data-post-id="@Model.Id" class="reaction-container bg-black p-1 rounded"
                style="text-align: center; color: #fff;">

                <div class="row g-1">
                    @foreach (var reactionType in Model.AvailableReactions)
                    {
                        <!-- Define the number of columns for each screen size -->
                        <div class="col-4 col-sm-3 col-md-2 col-lg-1 d-flex justify-content-center align-items-center">
                            <button class="reaction btn w-100" data-reaction-type="@((int)reactionType)" tabindex="0"
                                role="menuitem">
                                @(new ReactionViewModel { Type = reactionType }.GetEmoji())
                            </button>
                        </div>
                    }
                </div>
            </div>
        </div>

    </div>


    @{
        // Group reactions by their type
        var groupedReactions = Model.Reactions
        .GroupBy(r => r.Type)
        .Select(g => new
        {
            Type = g.Key,
            Count = g.Sum(r => 1), // Total count for this reaction type
            IsUserOwner = g.First().IsUserOwner // Check if the current user owns this reaction type
        });
    }

    @foreach (var group in groupedReactions)
    {
        var isActiveUserReaction = group.Type == Model.ActiveUserReaction;
        var currentUserReactionStyles = isActiveUserReaction ? "background: #ffffff24; border-radius: 12px; color: #fff;" :
        "";

        // Only display count if more than one user has reacted
        var reactionCountDisplay = group.Count >= 1 ? $"{group.Count}" : "";

        <button class="mr-2 reaction btn" data-reaction-type="@((int)group.Type)" data-post-id="@Model.Id"
            style="cursor: pointer; color: #fff; border-radius: 12px; border: 1px solid #ffffff24; @currentUserReactionStyles">
            @(new ReactionViewModel { Type = group.Type }.GetEmoji())
            <span class="reaction-count">@reactionCountDisplay</span>
        </button>
    }

</div>