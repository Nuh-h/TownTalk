@model TownTalk.ViewModels.ProfileViewModel
@using System.Security.Claims
@using TownTalk.ViewModels

<div class="container mt-5">
    <div class="row">
        <!-- Profile Section -->
        <div class="col-12 col-md-5 text-center mb-4">
            <div class="card text-white" style="background-color: #00000057;">
                <div class="card-header bg-secondary">
                    <h2>@Model.DisplayName's Profile</h2>
                </div>
                <div class="card-body">
                    <img src="@Model.ProfilePictureUrl" alt="Profile Picture" class="rounded-circle mb-3"
                    style="width: 150px; height: 150px;">
                    <p class="mt-3 text-muted">Joined on @Model.DateJoined.ToString("MMMM dd, yyyy")</p>

                    <div class="d-flex justify-content-around mb-4">
                        <div>
                            <h6>Posts</h6>
                            <p class="">@Model.Posts.Count()</p>
                        </div>
                        <div>
                            <h6>Followers</h6>
                            <p id="followers-count">@Model.FollowersCount</p>
                        </div>
                        <div>
                            <h6>Following</h6>
                            <p id="following-count">@Model.FollowingCount</p>
                        </div>
                    </div>
                    @if (User.FindFirstValue(ClaimTypes.NameIdentifier) != Model.UserId)
                    {
                        <div class="mt-3">
                            <p class="text-muted" id="mutual-followers-count">@($"You have {Model.MutualFollowersCount} mutual followers")</p>
                        </div>
                    }

                    <div class="mt-3">
                        <h6>Bio:</h6>
                        <p class="text-muted">@(!string.IsNullOrEmpty(Model.Bio) ? Model.Bio : "This user has not written a bio yet.")</p>
                    </div>

                    <!-- Optional Location and Last Active Date -->
                    @if (!string.IsNullOrEmpty(Model.Location))
                    {
                        <div class="mt-3">
                            <h6>Location:</h6>
                            <p class="text-muted">@Model.Location</p>
                        </div>
                    }
                    else
                    {
                        <div class="mt-3">
                            <h6>Location:</h6>
                            <p class="text-muted">Location not provided.</p>
                        </div>
                    }

                    @if (Model.LastActive != DateTime.MinValue)
                    {
                        <div class="mt-3">
                            <h6>Last Active:</h6>
                            <p class="text-muted">@(Model.LastActive?.ToString("MMMM dd, yyyy") ?? "Unknown")</p>
                        </div>
                    }
                    else
                    {
                        <div class="mt-3">
                            <h6>Last Active:</h6>
                            <p class="text-muted">Last active date not available.</p>
                        </div>
                    }

                    <div class="mb-4">
                        @if (User.Identity.IsAuthenticated && User.FindFirstValue(ClaimTypes.NameIdentifier) != Model.UserId)
                        {
                            <button
                                    class="btn @(Model.IsFollowing ? "btn-danger":"btn-primary") js-profile-btn"
                                    data-is-following="@Model.IsFollowing.ToString().ToLower()"
                                    data-profile-id="@Model.UserId">
                                @(Model.IsFollowing ? "Unfollow" : "Follow")
                            </button>

                        }
                </div>
                </div>
            </div>

            <!-- Account Management Card (Only if viewing own profile) -->
            @if (User.FindFirstValue(claimType: ClaimTypes.NameIdentifier) == Model.UserId)
            {
                <div class="card mt-4 text-white js-profile-user"
                    style="background-color: #00000057;"
                    data-profile-id="@Model.UserId">
                    <div class="card-header bg-secondary">
                        <h5>Account Management</h5>
                    </div>
                    <div class="card-body text-center gap-4">
                        <a href="Identity/Account/ChangePassword" class="btn btn-secondary btn-sm mb-1">Change
                            Password</a>
                        <a href="@Url.Action(action: "Delete", "Profile", new { id = Model.UserId })"
                            class="btn btn-danger btn-sm mb-1">Delete Account</a>
                    </div>

                    <!-- Chart: Posts Created by Month -->
                <div class="chart-container">
                    <canvas id="postsByMonthChart" width="400" height="200"></canvas>
                </div>

                <!-- Chart: Followers Growth Over Time -->
                <div class="chart-container">
                    <canvas id="followersGrowthChart" width="400" height="200"></canvas>
                </div>
                </div>


            }
        </div>

        <!-- User Posts Section -->
        <div class="col-12 col-md-7 mb-4">
            <div class="card text-white" style="background-color: #364e6657;">
                <div class="card-header bg-secondary">
                    <h5>User Posts</h5>
                </div>
                <div class="card-body">
                    @if (User.FindFirstValue(claimType: ClaimTypes.NameIdentifier) == Model.UserId) {
                        <div style="margin: 1rem 0;">
                            <a href="@Url.Action("Create", "Posts")" class="btn btn-primary btn-sm">New post</a>
                        </div>
                    }
                    @if (Model.Posts.Any())
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (PostViewModel post in Model.Posts)
                            {
                                <li class="list-group-item text-white" style="background-color: #00000057;">
                                    <h6 class="mb-1">@post.Title</h6>
                                    <p class="mb-1 text-muted">@post.Content</p>
                                    <small class="text-muted">Posted on @post.CreatedAt.ToShortDateString()</small>
                                    <div class="d-flex justify-content-between align-items-center mt-2">
                                        <a href="@Url.Action("Details", "Posts", new { id = post.Id })" class="btn btn-link text-primary">View Post</a>
                                        @if (User.FindFirstValue(claimType: ClaimTypes.NameIdentifier) == Model.UserId)
                                        {
                                            <div style="flex-shrink:0;">
                                                <a href="@Url.Action("Edit", "Posts", new { id = post.Id })" class="btn btn-warning btn-sm">Edit</a>
                                                <a href="@Url.Action(action: "Delete", "Posts", new { id = post.Id })"
                                                    class="btn btn-danger btn-sm">Delete</a>
                                            </div>
                                        }
                                    </div>
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No posts yet.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>