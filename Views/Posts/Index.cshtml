@using System.Security.Claims
@using TownTalk.Models
@model IEnumerable<TownTalk.Models.Post>


@{
    ViewBag.Title = "Posts Feed";
}

<div class="container mt-4">
    <h1>Posts Feed</h1>

    @foreach (Post post in Model)
    {
        <div class="card mb-3" style="background-color: rgba(255, 255, 255, 0.05);">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h5 class="card-title">@post.Title</h5>
                        <p class="card-text">@post.Content</p>
                    </div>

                    @if (User.Identity.IsAuthenticated && post.UserId == User.FindFirstValue(claimType:
                   ClaimTypes.NameIdentifier))
                    {
                        <div style="flex-shrink: 0;">
                            <a href="@Url.Action("Edit", "Posts", new { id = post.Id })"
                                class="btn btn-warning btn-sm me-1">Edit</a>
                            <a href="@Url.Action("Delete", "Posts", new { id = post.Id })"
                                class="btn btn-danger btn-sm">Delete</a>
                        </div>
                    }
                </div>

                <p class="card-text text-muted">
                    <small>Posted by @post.User.DisplayName in @post.Category.Name on
                        @post.CreatedAt.ToShortDateString()</small>
                </p>

                <div class="d-flex justify-content-between align-items-center">
                    <button class="btn btn-secondary btn-sm" data-toggle="collapse" data-target="#comments-@post.Id">
                        Show Comments
                    </button>
                    <div class="reaction-containers">
                        @{
                            var activeReactionStyles = "background: #ffffff24; padding: 0.2em; border-radius: 12px;";
                            var userId = User.FindFirstValue(claimType: ClaimTypes.NameIdentifier);
                            Reaction activeReaction = (Reaction)post.Reactions.FirstOrDefault(r => r?.PostId ==  post?.Id && r?.UserId == userId );
                        }
                        <span class="mr-2 reaction" data-reaction-type="0" data-post-id="@post.Id"  style="cursor: pointer; @(activeReaction?.Type == ReactionType.Like ? activeReactionStyles : "")">
                            üòä <span class="reaction-count">@post.Reactions.Where(r => r.Type == ReactionType.Like).Count()</span>
                        </span>
                        <span class="mr-2 reaction" data-reaction-type="1" data-post-id="@post.Id"
                            style="cursor: pointer; @(activeReaction?.Type == ReactionType.Love ? activeReactionStyles : "")">
                            ‚ù§Ô∏è <span class="reaction-count">@post.Reactions.Where(r => r.Type == ReactionType.Love).Count()</span>
                        </span>
                        <span class="mr-2 reaction" data-reaction-type="2" data-post-id="@post.Id"
                            style="cursor: pointer; @(activeReaction?.Type == ReactionType.Sad ? activeReactionStyles : "")">
                            üò¢ <span class="reaction-count">@post.Reactions.Where(r => r.Type == ReactionType.Sad).Count()</span>
                        </span>
                    </div>
                </div>

                <div class="collapse mt-2" id="comments-@post.Id">
                    <div class="card card-body mt-2" style="background-color: rgba(255, 255, 255, 0.05);">
                        <h6>Comments</h6>
                        <form class="comment-form" method="post" action="/Comments/Create">
                            <input type="hidden" name="PostId" value="@post.Id" />
                            <div class="input-group mt-2">
                                <input type="text" class="form-control" name="Content" placeholder="Add a comment..."
                                    required />
                                <div class="input-group-append">
                                    <button class="btn btn-primary" type="submit">Comment</button>
                                </div>
                            </div>
                        </form>
                        <div id="commentList-@post.Id" class="comment-list">
                            @foreach (Comment comment in post.Comments.Where(c => c.ParentCommentId == null) /* Top-level
                                    comments */)
                            {
                                if (comment != null)
                                {
                                    await Html.RenderPartialAsync(partialViewName: "_Comment.cshtml", model: comment);
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Toggle reply form display
        $(document).on('click', '.reply-button', function () {
            var parentCommentId = $(this).data('parent-comment-id');
            var replyFormId = $(this).data('reply-form-id');
            $(this).closest('.comment-item').find(`#${replyFormId}`).toggle(); // Toggle the reply form
        });


        $(document).ready(function () {
            // Global create comment AJAX handler
            $(document).on('submit', '.comment-form', function (e) {
                e.preventDefault();

                var form = $(this);
                $.ajax({
                    type: 'POST',
                    url: form.attr('action'),
                    data: form.serialize(),
                    success: function (data) {
                        if (data.success) {
                            // Construct new comment HTML
                            var newCommentHtml = `
                                    <div style="background: #00000059; padding: 1rem; border-radius: 0.3em;">
                                        <strong>${data.userDisplayName}</strong>
                                        <p class="text-muted"><small>Posted on ${data.createdAt}</small></p>
                                        <p>${data.content}</p>
                                        <button class="btn btn-link btn-sm text-muted mx-0 p-0 reply-button" data-parent-comment-id="${data.id}" data-reply-form-id="${data.id}">Reply</button> <!-- Add reply button -->
                                            <button class="btn btn-link btn-sm text-muted mx-0 p-0 delete-comment" data-comment-id="${data.id}">Delete</button>
                                        <!-- Reply form hidden by default -->
                                        <div class="reply-form" style="display:none;" id="${data.id}">
                                            <form class="comment-form" method="post" action="/Comments/Create">
                                                <input type="hidden" name="PostId" value="${data.postId}">
                                                <input type="hidden" name="ParentCommentId" value="${data.id}">
                                                <!-- Set ParentCommentId for replies -->
                                                <div class="input-group mt-2">
                                                    <input type="text" class="form-control" name="Content" placeholder="Add a reply..." required="">
                                                    <div class="input-group-append">
                                                        <button class="btn btn-primary" type="submit">Reply</button>
                                                    </div>
                                                </div>
                                            </form>
                                        </div>
                                        <div class="replies-list mt-2 ml-3"></div>
                                    </div>
                                    `;

                            if (data.parentCommentId) {
                                // If this is a reply, append to the parent comment's reply list
                                var parentComment = $('[data-comment-id="' + data.parentCommentId + '"]');
                                if (parentComment.length) {
                                    // If replies are not shown yet, show them
                                    if (parentComment.children('.replies-list').length === 0) {
                                        parentComment.after('<div class="replies-list mt-2"></div>');
                                    }
                                    parentComment.children('.replies-list').append(newCommentHtml); // Append to replies list
                                }
                            } else {
                                // If not a reply, prepend to the main comment list
                                $('#commentList-' + data.postId).prepend(newCommentHtml);
                            }
                            form[0].reset(); // Reset the form
                        } else {
                            alert('Error creating comment. Please try again.');
                        }
                    },
                    error: function () {
                        alert('There was an error submitting your comment. Please try again.');
                    }
                });
            });

            // Global delete comment AJAX handler
            $(document).on('click', '.delete-comment', function () {
                var commentId = $(this).data('comment-id');
                $.ajax({
                    type: 'POST',
                    url: '/Comments/Delete/' + commentId,
                    data: { id: commentId },
                    success: function (response) {
                        if (response.success) {
                            // Remove the comment from the DOM
                            $('[data-comment-id="' + response.id + '"]').remove();
                        } else {
                            alert('Error deleting the comment. Please try again.');
                        }
                    },
                    error: function () {
                        alert('There was an error deleting the comment. Please try again.');
                    }
                });
            });
        });


        @* Reactions *@
            $('.reaction').on('click', function () {
                const reactionType = $(this).data('reaction-type');
                const postId = $(this).data('post-id');
                const activeReaction = $(this).data('active-reaction');

                // Check if the user has already reacted (you'll need to implement this)
                const existingReaction = reactionType === activeReaction;

                if (existingReaction) {
                    // Remove the existing reaction
                    $.ajax({
                        url: `/Reactions/${existingReaction.id}`,
                        type: 'DELETE',
                        success: function () {
                            // Update counts and UI as needed
                        },
                        error: function () {
                            alert('Error removing reaction');
                        }
                    });
                } else {
                    // Add a new reaction
                    const newReaction = {
                        PostId: postId,
                        Type: reactionType // Use the enum value
                    };

                    $.ajax({
                        url: '/Reactions/Create',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(newReaction),
                        success: function (data) {
                            // Update counts and UI as needed
                        },
                        error: function () {
                            alert('Error adding reaction');
                        }
                    });
                }
            });
    </script>
}
